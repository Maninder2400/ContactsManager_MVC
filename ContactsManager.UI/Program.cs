using ServiceContracts;
using Services;
using Microsoft.EntityFrameworkCore;
using Entities;
using RepositoryContracts;
using Repositories;
using Serilog;
using CRUDExample.Filters.ActionFilters;
using CRUDExample.StartupExtensions;
using CRUDExample.Middleware;

var builder = WebApplication.CreateBuilder(args);

builder.Services.ConfigureServices(builder.Configuration);

//serilog 
//enabling the serilog and also replacing built_in aspnetcore logging framework
builder.Host.UseSerilog((HostBuilderContext context, IServiceProvider services, LoggerConfiguration loggerConfiguration) =>
{
    loggerConfiguration.ReadFrom.Configuration(context.Configuration).//reads configuration settings form build in configuration
    ReadFrom.Services(services);//reads out current app's services and make them available to serilog
});

var app = builder.Build();

//app.UseHttpLogging();


if (builder.Environment.IsDevelopment())
    app.UseDeveloperExceptionPage();
else
{
    app.UseExceptionHandler("/Error");
    app.UseExceptionHandlingMiddleware();
}

app.UseHsts();//http strict transfer security
app.UseHttpsRedirection();
//app.Logger.LogDebug("deBug-message");
//app.Logger.LogInformation("info-message");
//app.Logger.LogWarning("warning-message");
//app.Logger.LogError("error-message");
//app.Logger.LogCritical("critical-message");

//enabling endpoint Logmessage which we see at the end of the request
app.UseSerilogRequestLogging();

if (builder.Environment.IsEnvironment("Test") == false)
    Rotativa.AspNetCore.RotativaConfiguration.Setup("wwwroot", wkhtmltopdfRelativePath: "Rotativa");

app.UseStaticFiles();

//these 4 has to be in the same order
app.UseRouting();//identifing the action method based on te route
app.UseAuthentication();//Reading the Identity or login cokkie from request cokkie ,and sequence of this milldleware matters as the authentication cokkie has to be read before excuting the action method
app.UseAuthorization();//validate access permissions of the user
app.MapControllers();//Execcuting the fillter pipeline (action + filters)

//conventional routing
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllerRoute(
        name: "areas",
        pattern: "{area:exists}/{controller=Home}/{action=Index}"
        //admin/home/index
        );
    //endpoints.MapControllerRoute(name: "default", pattern: "{controller}/{action}/{id?}");
});
app.Run();

public partial class Program { } // make the autogenerated Program accessible programmatically 
